// <auto-generated />
using System;
using DotnetFoundation.DAL.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotnetFoundation.DAL.Migrations
{
    [DbContext(typeof(SqlDatabaseContext))]
    partial class SqlDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("latin1_swedish_ci")
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "latin1");

            modelBuilder.Entity("DotnetFoundation.DAL.Models.UsersDBO", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("userid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address1City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address1_city");

                    b.Property<string>("Address1Country")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address1_country");

                    b.Property<string>("Address1Pincode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("address1_pincode");

                    b.Property<string>("Address1State")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address1_state");

                    b.Property<string>("Address1Street1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address1_street1");

                    b.Property<string>("Address1Street2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address1_street2");

                    b.Property<string>("Address2City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address2_city");

                    b.Property<string>("Address2Country")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address2_country");

                    b.Property<string>("Address2Pincode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("address2_pincode");

                    b.Property<string>("Address2State")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address2_state");

                    b.Property<string>("Address2Street1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address2_street1");

                    b.Property<string>("Address2Street2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address2_street2");

                    b.Property<string>("CandidateComments")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("candidatecomments");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comments");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("createdon");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("dateofbirth");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("emailaddress");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmergencyContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("emergencycontactnumber");

                    b.Property<string>("FacebookId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("facebookid");

                    b.Property<string>("Features")
                        .HasColumnType("text")
                        .HasColumnName("features");

                    b.Property<string>("FingerPrintValue")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fingerprintvalue")
                        .HasComment("Path of finger print");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstname");

                    b.Property<bool?>("Gender")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("gender");

                    b.Property<string>("HallTicket")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("hallticket");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsAcceptedTermsAndConditions")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isacceptedtermsandconditions");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("LinkedinId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("linkedinid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("mobilenumber");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("modifiedby");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("modifiedon");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePicPath")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("profilepicpath")
                        .HasComment("Path of profile picture");

                    b.Property<sbyte?>("QuestionPaperSetNumber")
                        .HasColumnType("tinyint")
                        .HasColumnName("questionpapersetnumber");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("registrationumber");

                    b.Property<float?>("ResFloat1")
                        .HasColumnType("float")
                        .HasColumnName("res_float1");

                    b.Property<float?>("ResFloat2")
                        .HasColumnType("float")
                        .HasColumnName("res_float2");

                    b.Property<int?>("ResInt1")
                        .HasColumnType("int")
                        .HasColumnName("res_int1");

                    b.Property<int?>("ResInt2")
                        .HasColumnType("int")
                        .HasColumnName("res_int2");

                    b.Property<string>("ResString1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("res_string1");

                    b.Property<string>("ResString2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("res_string2");

                    b.Property<string>("Salutation")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)")
                        .HasColumnName("salutation")
                        .IsFixedLength();

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'")
                        .HasComment("1 - active, 2 - deactive, 3 - deleted, 0 - dummy user, Shouldnot use 9");

                    b.Property<string>("ThumbImpression")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("thumbimpression")
                        .HasComment("Path of thumb impression");

                    b.Property<string>("TraineePhoto")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("traineephoto")
                        .HasComment("Path of trainee photo");

                    b.Property<string>("TrainingProviderId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("trainingproviderid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<sbyte>("UnSubscribe")
                        .HasColumnType("tinyint")
                        .HasColumnName("unsubscribe");

                    b.Property<string>("UserDisplayId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("userdisplayid");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("usertype")
                        .HasComment("0-Admin, 1-employee, 2-trainee, 3-super user, 4-trainingprovider");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("users", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("LoginProvider", "UserId");

                    b.ToTable("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
